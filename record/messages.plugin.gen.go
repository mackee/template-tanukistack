// Code generated by github.com/mackee/go-sqlla/v2/cmd/sqlla. DO NOT EDIT.
package record

import (
	"context"
	"fmt"
	"time"

	"github.com/mackee/go-sqlla/v2"
)

type MessageTable struct{}

func NewMessageTable() *MessageTable {
	return &MessageTable{}
}

func (m *MessageTable) GetByID(ctx context.Context, db sqlla.DB, c0 MessageID) (*Message, error) {
	row, err := NewMessageSQL().Select().
		ID(c0).
		SingleContext(ctx, db)
	if err != nil {
		return nil, fmt.Errorf("failed to get Message by ID: %w", err)
	}
	return &row, nil
}

type MessageTableCreateInput struct {
	Author string
	Text   string
}

func (m *MessageTable) newCreateSQL(input MessageTableCreateInput) messageInsertSQL {
	query := NewMessageSQL().Insert().
		ValueAuthor(input.Author).
		ValueText(input.Text)
	return query
}

func (m *MessageTable) Create(ctx context.Context, db sqlla.DB, input MessageTableCreateInput) (*Message, error) {
	row, err := m.newCreateSQL(input).ExecContext(ctx, db)
	if err != nil {
		return nil, fmt.Errorf("failed to create Message: %w", err)
	}
	return &row, nil
}

func (m *MessageTable) CreateMulti(ctx context.Context, db sqlla.DB, inputs []MessageTableCreateInput) error {
	bi := NewMessageSQL().BulkInsert()
	for _, input := range inputs {
		bi.Append(m.newCreateSQL(input))
	}
	if _, err := bi.ExecContext(ctx, db); err != nil {
		return fmt.Errorf("failed to create Messages: %w", err)
	}
	return nil
}

type Messages []*Message

func (m Message) DefaultInsertHook(q messageInsertSQL) (messageInsertSQL, error) {
	now := time.Now()
	return q.
		ValueCreatedAt(now).
		ValueUpdatedAt(now), nil
}

func (m Message) DefaultUpdateHook(q messageUpdateSQL) (messageUpdateSQL, error) {
	now := time.Now()
	return q.
		SetUpdatedAt(now), nil
}
